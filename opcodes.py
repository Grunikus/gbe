"""Opcode constants from: https://izik1.github.io/gbops/index.html
Explanations found at: https://meganesu.github.io/generate-gb-opcodes/"""
"""
STOP         = 0x10  # STOP
HALT        = 0x76  # HALT
"""
NOP         = 0x00  # No operation
LD_BC_IMM16 = 0x01  # LD BC, nn
LD__BC__A   = 0x02  # LD (BC), A
INC_BC      = 0x03  # INC BC
INC_B       = 0x04  # INC B
DEC_B       = 0x05  # DEC B
LD_B_IMM    = 0x06  # LD B, imm
RLCA        = 0x07  # RLCA
LD__IMM16__SP = 0x08  # LD (nn), SP
ADD_HL_BC   = 0x09  # ADD HL, BC
LD_A__BC_   = 0x0A  # LD A, (BC)
DEC_BC      = 0x0B  # DEC BC
INC_C       = 0x0C  # INC C
DEC_C       = 0x0D  # DEC C
LD_C_IMM    = 0x0E  # LD C, imm
RRCA        = 0x0F  # RRCA
LD_DE_IMM16 = 0x11  # LD DE, nn
LD__DE__A   = 0x12  # LD (DE), A
INC_DE      = 0x13  # INC DE
INC_D       = 0x14  # INC D
DEC_D       = 0x15  # DEC D
LD_D_IMM    = 0x16  # LD D, imm
RLA         = 0x17  # RLA
JR_IMM      = 0x18  # JR imm
ADD_HL_DE   = 0x19  # ADD HL, DE
JR_Z_IMM    = 0x20  # JR Z, imm
LD_A__DE_   = 0x1A  # LD A, (DE)
DEC_DE      = 0x1B  # DEC DE
INC_E       = 0x1C  # INC E
DEC_E       = 0x1D  # DEC E
LD_E_IMM    = 0x1E  # LD E, imm
RRA         = 0x1F  # RRA
LD_HL_IMM16 = 0x21  # LD HL, nn
LD__HL_INC__A = 0x22  # LD (HL+), A
INC_HL      = 0x23  # INC HL
INC_H       = 0x24  # INC H
DEC_H       = 0x25  # DEC H
LD_H_IMM    = 0x26  # LD H, imm
DAA         = 0x27  # DAA
JR_NZ_IMM   = 0x28  # JR NZ, imm
ADD_HL_HL   = 0x29  # ADD HL, HL
LD_A__HL_INC_ = 0x2A  # LD A, (HL+)
DEC_HL      = 0x2B  # DEC HL
INC_L       = 0x2C  # INC L
DEC_L       = 0x2D  # DEC L
LD_L_IMM    = 0x2E  # LD L, imm
CPL         = 0x2F  # CPL
JR_C_IMM    = 0x30  # JR C, imm
LD_SP_IMM16 = 0x31  # LD SP, nn
LD__HL_DEC__A = 0x32  # LD (HL-), A
INC_SP      = 0x33  # INC SP
INC__HL_    = 0x34  # INC (HL)
DEC__HL_    = 0x35  # DEC (HL)
LD__HL__IMM = 0x36  # LD (HL), imm
SCF         = 0x37  # SCF
JR_NC_IMM   = 0x38  # JR NC, imm
ADD_HL_SP   = 0x39  # ADD HL, SP
LD_A__HL_DEC_ = 0x3A  # LD A, (HL-)
DEC_SP      = 0x3B  # DEC SP
INC_A       = 0x3C  # INC A
DEC_A       = 0x3D  # DEC A
LD_A_IMM    = 0x3E  # LD A, imm
CCF         = 0x3F  # CCF
LD_B_B      = 0x40  # LD B, B
LD_B_C      = 0x41  # LD B, C
LD_B_D      = 0x42  # LD B, D
LD_B_E      = 0x43  # LD B, E
LD_B_H      = 0x44  # LD B, H
LD_B_L      = 0x45  # LD B, L
LD_B__HL_   = 0x46  # LD B, (HL)
LD_B_A      = 0x47  # LD B, A
LD_C_B      = 0x48  # LD C, B
LD_C_C      = 0x49  # LD C, C
LD_C_D      = 0x4A  # LD C, D
LD_C_E      = 0x4B  # LD C, E
LD_C_H      = 0x4C  # LD C, H
LD_C_L      = 0x4D  # LD C, L
LD_C__HL_   = 0x4E  # LD C, (HL)
LD_C_A      = 0x4F  # LD C, A
LD_D_B      = 0x50  # LD D, B
LD_D_C      = 0x51  # LD D, C
LD_D_D      = 0x52  # LD D, D
LD_D_E      = 0x53  # LD D, E
LD_D_H      = 0x54  # LD D, H
LD_D_L      = 0x55  # LD D, L
LD_D__HL_   = 0x56  # LD D, (HL)
LD_D_A      = 0x57  # LD D, A
LD_E_B      = 0x58  # LD E, B
LD_E_C      = 0x59  # LD E, C
LD_E_D      = 0x5A  # LD E, D
LD_E_E      = 0x5B  # LD E, E
LD_E_H      = 0x5C  # LD E, H
LD_E_L      = 0x5D  # LD E, L
LD_E__HL_   = 0x5E  # LD E, (HL)
LD_E_A      = 0x5F  # LD E, A
LD_H_B      = 0x60  # LD H, B
LD_H_C      = 0x61  # LD H, C
LD_H_D      = 0x62  # LD H, D
LD_H_E      = 0x63  # LD H, E
LD_H_H      = 0x64  # LD H, H
LD_H_L      = 0x65  # LD H, L
LD_H__HL_   = 0x66  # LD H, (HL)
LD_H_A      = 0x67  # LD H, A
LD_L_B      = 0x68  # LD L, B
LD_L_C      = 0x69  # LD L, C
LD_L_D      = 0x6A  # LD L, D
LD_L_E      = 0x6B  # LD L, E
LD_L_H      = 0x6C  # LD L, H
LD_L_L      = 0x6D  # LD L, L
LD_L__HL_   = 0x6E  # LD L, (HL)
LD_L_A      = 0x6F  # LD L, A
LD__HL__B   = 0x70  # LD (HL), B
LD__HL__C   = 0x71  # LD (HL), C
LD__HL__D   = 0x72  # LD (HL), D
LD__HL__E   = 0x73  # LD (HL), E
LD__HL__H   = 0x74  # LD (HL), H
LD__HL__L   = 0x75  # LD (HL), L
LD__HL__A   = 0x77  # LD (HL), A
LD_A_B      = 0x78  # LD A, B
LD_A_C      = 0x79  # LD A, C
LD_A_D      = 0x7A  # LD A, D
LD_A_E      = 0x7B  # LD A, E
LD_A_H      = 0x7C  # LD A, H
LD_A_L      = 0x7D  # LD A, L
LD_A__HL_   = 0x7E  # LD A, (HL)
LD_A_A      = 0x7F  # LD A, A
ADD_A_B     = 0x80  # ADD A, B
ADD_A_C     = 0x81  # ADD A, C
ADD_A_D     = 0x82  # ADD A, D
ADD_A_E     = 0x83  # ADD A, E
ADD_A_H     = 0x84  # ADD A, H
ADD_A_L     = 0x85  # ADD A, L
ADD_A__HL_  = 0x86  # ADD A, (HL)
ADD_A_A     = 0x87  # ADD A, A
ADC_A_B     = 0x88  # ADC A, B
ADC_A_C     = 0x89  # ADC A, C
ADC_A_D     = 0x8A  # ADC A, D
ADC_A_E     = 0x8B  # ADC A, E
ADC_A_H     = 0x8C  # ADC A, H
ADC_A_L     = 0x8D  # ADC A, L
ADC_A__HL_  = 0x8E  # ADC A, (HL)
ADC_A_A     = 0x8F  # ADC A, A
SUB_A_B     = 0x90  # SUB A, B
SUB_A_C     = 0x91  # SUB A, C
SUB_A_D     = 0x92  # SUB A, D
SUB_A_E     = 0x93  # SUB A, E
SUB_A_H     = 0x94  # SUB A, H
SUB_A_L     = 0x95  # SUB A, L
SUB_A__HL_  = 0x96  # SUB A, (HL)
SUB_A_A     = 0x97  # SUB A, A
SBC_A_B     = 0x98  # SBC A, B
SBC_A_C     = 0x99  # SBC A, C
SBC_A_D     = 0x9A  # SBC A, D
SBC_A_E     = 0x9B  # SBC A, E
SBC_A_H     = 0x9C  # SBC A, H
SBC_A_L     = 0x9D  # SBC A, L
SBC_A__HL_  = 0x9E  # SBC A, (HL)
SBC_A_A     = 0x9F  # SBC A, A
AND_A_B     = 0xA0  # AND A, B
AND_A_C     = 0xA1  # AND A, C
AND_A_D     = 0xA2  # AND A, D
AND_A_E     = 0xA3  # AND A, E
AND_A_H     = 0xA4  # AND A, H
AND_A_L     = 0xA5  # AND A, L
AND_A__HL_  = 0xA6  # AND A, (HL)
AND_A_A     = 0xA7  # AND A, A
XOR_A_B     = 0xA8  # XOR A, B
XOR_A_C     = 0xA9  # XOR A, C
XOR_A_D     = 0xAA  # XOR A, D
XOR_A_E     = 0xAB  # XOR A, E
XOR_A_H     = 0xAC  # XOR A, H
XOR_A_L     = 0xAD  # XOR A, L
XOR_A__HL_  = 0xAE  # XOR A, (HL)
XOR_A_A     = 0xAF  # XOR A, A
OR_A_B      = 0xB0  # OR A, B
OR_A_C      = 0xB1  # OR A, C
OR_A_D      = 0xB2  # OR A, D
OR_A_E      = 0xB3  # OR A, E
OR_A_H      = 0xB4  # OR A, H
OR_A_L      = 0xB5  # OR A, L
OR_A__HL_   = 0xB6  # OR A, (HL)
OR_A_A      = 0xB7  # OR A, A
CP_A_B      = 0xB8  # CP A, B
CP_A_C      = 0xB9  # CP A, C
CP_A_D      = 0xBA  # CP A, D
CP_A_E      = 0xBB  # CP A, E
CP_A_H      = 0xBC  # CP A, H
CP_A_L      = 0xBD  # CP A, L
CP_A__HL_   = 0xBE  # CP A, (HL)
CP_A_A      = 0xBF  # CP A, A
POP_BC      = 0xC1  # POP BC
PUSH_BC     = 0xC5  # PUSH BC
ADD_A_IMM   = 0xC6  # ADD A, imm
RST_00H      = 0xC7  # RST 00H
ADC_A_IMM   = 0xCE  # ADC A, imm
RST_08H      = 0xCF  # RST 08H
POP_DE      = 0xD1  # POP DE
PUSH_DE     = 0xD5  # PUSH DE
SUB_A_IMM   = 0xD6  # SUB A, imm
RST_10H      = 0xD7  # RST 10H
# ADC_IMM     = 0xDD  # ADC A, imm
SBC_A_IMM   = 0xDE  # SUB A, imm
RST_18H      = 0xDF  # RST 18H
LD__NN__A   = 0xE0  # LD (nn), A
POP_HL      = 0xE1  # POP HL
LD__C__A    = 0xE2  # LD (C), A
# LD_A__NN_   = 0xE3  # LD A, (nn)
PUSH_HL     = 0xE5  # PUSH HL
AND_A_IMM   = 0xE6  # AND A, imm
ADD_SP_IMM  = 0xE8  # ADD SP, imm
LD__IMM16__A= 0xEA  # LD (imm16), A
RST_20H      = 0xE7  # RST 20H
# LD_A_NN     = 0xEB  # LD A, (nn)
# ADC_SP_IMM  = 0xED  # ADC SP, imm
XOR_A_IMM   = 0xEE  # XOR A, imm
RST_28H      = 0xEF  # RST 28H
LD_A__NN_   = 0xF0  # LD A, (nn)
POP_AF      = 0xF1  # POP AF
LD_A__C_    = 0xF2  # LD A, (C)
PUSH_AF     = 0xF5  # PUSH AF
OR_A_IMM    = 0xF6  # OR A, imm
RST_30H      = 0xF7  # RST 30H
LD_HL_S8    = 0xF8  # LD HL, SP+s8
LD_SP_HL    = 0xF9  # LD SP, HL
LD_A__IMM16_= 0xFA  # LD A, (imm16)
# CP_IMM      = 0xFD  # CP imm
CP_A_IMM    = 0xFE  # CP A, imm
RST_38H      = 0xFF  # RST 38H
"""
RET_NZ      = 0xC0  # RET NZ
JP_NZ       = 0xC2  # JP NZ, nn
JP_ADDR     = 0xC3  # JP nn
CALL_NZ     = 0xC4  # CALL NZ, nn
RET_Z       = 0xC8  # RET Z
RET         = 0xC9  # RET
JP_Z        = 0xCA  # JP Z, nn
PREFIX_CB   = 0xCB  # CB Prefix
CALL_Z      = 0xCC  # CALL Z, nn
CALL        = 0xCD  # CALL nn
RET_C       = 0xD0  # RET C
JP_C        = 0xD2  # JP C, nn
OUT_C       = 0xD3  # OUT (C), A
CALL_C      = 0xD4  # CALL C, nn
RET_NC      = 0xD8  # RET NC
RETI        = 0xD9  # RETI
JP_NC       = 0xDA  # JP NC, nn
IN_C        = 0xDB  # IN A, (C)
CALL_NC     = 0xDC  # CALL NC, nn
CALL_HL     = 0xE4  # CALL nn
JP_HL       = 0xE9  # JP (HL)
CALL_HL     = 0xEC  # CALL nn
DI          = 0xF3  # DI
CALL_NN     = 0xF4  # CALL nn
EI          = 0xFB  # EI
CALL_NN     = 0xFC  # CALL nn
"""
